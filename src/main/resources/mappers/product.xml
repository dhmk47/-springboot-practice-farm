<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.springboot.farm.springbootpractice.domain.product.ProductRepository">
  	<insert id="save" parameterType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		insert into
  			product_kind
  		values(
  			0,
  			#{product_name},
  			#{price},
  			#{season},
  			#{grow_day},
  			now(),
  			now()
  		)
  	</insert>
  	
  	<insert id="addUserProduct" parameterType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		insert into
  			user_product
  		values(
  			#{product_code},
  			#{product_name},
  			#{price},
  			#{season},
  			#{amount},
  			#{user_code},
  			#{purchase_price},
  			now(),
  			now()
  		)
  	</insert>
  	
  	<select id="readAllProduct" resultType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		select
  			product_code,
  			product_name,
  			price,
  			season,
  			grow_day
  		from
  			product_kind
  	</select>
  	
  	<select id="readMyProductList" parameterType="Integer" resultType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		select
  			product_code,
  			product_name,
  			price,
  			season,
  			amount,
  			purchase_price
  		from
  			user_product
  		where
  			user_code = #{userCode}
  	</select>
  	
  	<select id="readUserProductByProductCode" parameterType="com.springboot.farm.springbootpractice.domain.entity.Product" resultType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		select
  			product_code,
  			product_name,
  			price,
  			season,
  			amount,
  			user_code,
  			purchase_price,
  			create_date,
  			update_date
  		from
  			user_product
  		where
  			product_code = #{product_code}
  			and user_code = #{user_code}
  	</select>
  	
  	<select id="readProductByProductName" parameterType="String" resultType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		select
  			product_code,
  			product_name,
  			price,
  			season,
  			grow_day,
  			create_date,
  			update_date
  		from
  			product_kind
  		where
  			product_name = #{productName}
  	</select>
  	
  	<select id="readRecentlyProductLIst" parameterType="String" resultType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		SELECT
			product_code,
			product_name,
			price,
			season,
			grow_day,
			create_date,
			update_date
		FROM
			product_kind
		WHERE
			create_date > #{date}
  	</select>
  	
  	<select id="readModifiedProductList" parameterType="String" resultType="com.springboot.farm.springbootpractice.domain.entity.PastAndNowProductInfo">
  		SELECT
			if(op.product_name != pk.product_name, op.product_name, pk.product_name) AS original_name,
			if(pk.product_name != op.product_name, pk.product_name, op.product_name) AS updated_name,
			nullif(op.price, pk.price) AS original_price,
			nullif(pk.price, op.price) AS updated_price,
			nullif(op.season, pk.season) AS original_season,
			nullif(pk.season, op.season) AS updated_season,
			nullif(op.grow_day, pk.grow_day) AS original_grow_day,
			nullif(pk.grow_day, op.grow_day) AS updated_grow_day
		FROM
			original_product op
			LEFT OUTER JOIN product_kind pk ON(pk.product_code = op.product_code)
		WHERE
			op.update_date > #{data}
			AND (op.product_name != pk.product_name 
			or op.price != pk.price 
			or op.season != pk.season 
			or op.grow_day != pk.grow_day)
  	</select>
  	
  	<update id="update" parameterType="com.springboot.farm.springbootpractice.domain.entity.Product">
  		update
  			product_kind
  		set
  			product_name = #{product_name},
  			price = #{price},
  			season = #{season},
  			grow_day = #{grow_day}
  		where
  			product_code = #{product_code}
  	</update>
  	
  	<delete id="delete" parameterType="Integer">
  		delete
  		from
  			product_kind
  		where
  			product_code = #{productCode}
  	</delete>
  
  </mapper>